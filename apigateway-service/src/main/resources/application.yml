
server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      default-filters: # Global Filter는 한번에 선언
        - name: GlobalFilter # 글로벌 필터 클래스 입력
          args:
            baseMessage: Spring Cloud Gateway Global Filter Print Success
            preLogger: true
            postLogger: true
      routes:
        - id: first-service
          # uri: http://localhost:8081/ # 2. 여기로 가라  (이동될 주소)
          uri: lb://MY-FIRST-SERVICE # 2. 여기로 가라   (name으로 Forwarding) (Eureka Server 인스턴스 이름)
          predicates: # 조건절
            - Path=/first-service/** # 1. first-service로 들어오면  (사용자가 입력한 조건 (http://localhost:8000/first-service/welcome))
          filters: # Filter/Custom Filter는 라우터 마다 등록 필요
            - AddRequestHeader=first-request, first-request-header2
            - AddResponseHeader=first-response, first-response-header2
            - CustomFilter # 자바로 구현한 CustomFilter 사용
        - id: second-service
          # uri: http://localhost:8082/
          uri: lb://MY-SECOND-SERVICE
          predicates: # 조건절
            - Path=/second-service/**
          filters:
            - AddRequestHeader=second-request, second-request-header2
            - AddResponseHeader=second-response, second-response-header2
            - name: CustomFilter
            - name: LoggingFilter # 추가적인 파라미터를 넣을거면 name 옵션을 주어야한다.
              args:
                baseMessage: Hi Logging Filter
                preLogger: true
                postLogger: true
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user-service/**
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # 헤더값 삭제: 포스트로 전달하는 값은 매번 새로운 값으로 인식하기 위함
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # /user-service/(?<segment>.*)이렇게 들어오는 요청은 /$\{segment}로 URI를 바꿔서 전달한다는 의미
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**